// DO NOT EDIT. Autogenerated with github.com/tcard/gosumwalk.

package example

import "fmt"

func WalkMyTree(t MyTree) MyTreeWalker {
	w := newMyTreeWalker()
	go func() {
		defer w.signalDone()
		runMyTreeWalker(w, t)
	}()
	return w
}

type MyTreeWalker struct {
	AnonBranch	chan AnonBranch
	Leaf		chan Leaf
	Done		chan struct{}
}

func (w MyTreeWalker) Iter() <-chan MyTree {
	ch := make(chan MyTree)
	go func() {
		for {
			select {
			case node := <-w.AnonBranch:
				ch <- node
			case node := <-w.Leaf:
				ch <- node
			case <-w.Done:
				close(ch)
			}
		}
	}()
	return ch
}
func newMyTreeWalker() MyTreeWalker {
	return MyTreeWalker{AnonBranch: make(chan AnonBranch), Leaf: make(chan Leaf), Done: make(chan struct{})}
}
func runMyTreeWalker(w MyTreeWalker, t MyTree) {
	switch node := t.(type) {
	case AnonBranch:
		w.AnonBranch <- node
	case Leaf:
		w.Leaf <- node
	default:
		panic(fmt.Sprintf("Bad MyTree type %T", node))
	}
}
func (w MyTreeWalker) signalDone() {
	w.Done <- struct{}{}
	close(w.AnonBranch)
	close(w.Leaf)
	close(w.Done)
}
